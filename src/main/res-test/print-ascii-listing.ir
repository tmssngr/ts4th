printNibble:
	pop r0 (u8)
	r1 = 15 (u8)
	and r0, r1 (u8)
	r1 = 48 (u8)
	add r0, r1 (u8)
	push r0 (u8)
	r1 = 57 (u8)
	gt r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, .i2
	r0 = 65 (u8)
	r1 = 57 (u8)
	sub r0, r1 (u8)
	r1 = 1 (u8)
	sub r0, r1 (u8)
	move r1, r0 (u8)
	pop r0 (u8)
	add r0, r1 (u8)
	push r0 (u8)
.i2:
	pop r0 (u8)
	emit
	ret
printHex2:
	pop r0 (u8)
	push r0 (u8)
	move r1, r0 (u8)
	r0 = 4 (u8)
	shr r1, r0 (u8)
	push r1 (u8)
	call printNibble
	call printNibble
	ret
printHex4:
	pop r0 (u16)
	push r0 (u16)
	move r1, r0 (u16)
	r0 = 8 (u16)
	shr r1, r0 (u16)
	move r0, r1 (u16)
	cast r0 (u16 -> u8)
	push r0 (u8)
	call printHex2
	pop r0 (u16)
	cast r0 (u16 -> u8)
	push r0 (u8)
	call printHex2
	ret
main:
	r0 = 32 (u8)
	emit
	r0 = 120 (u8)
	emit
	r0 = 0 (u8)
	push r0 (u8)
	r0 = 16 (u8)
	pushVar r0 (u8)
	pop r0 (u8)
	pushVar r0 (u8)
.i1:
	read r0, var[0(u8)]
	read r1, var[1(u8)]
	lt r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, .i3
	read r0, var[0(u8)]
	r1 = 7 (u8)
	and r0, r1 (u8)
	r1 = 0 (u8)
	eq r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, .i5
	r0 = 32 (u8)
	emit
.i5:
	read r0, var[0(u8)]
	push r0 (u8)
	call printNibble
	read r0, var[0(u8)]
	r1 = 1 (u8)
	add r0, r1 (u8)
	write [0(u8)], r0
	jump .i1
.i3:
	dropVars u8, u8
	r0 = 10 (u8)
	emit
	r0 = 32 (u8)
	push r0 (u8)
	r0 = 128 (u8)
	pushVar r0 (u8)
	pop r0 (u8)
	pushVar r0 (u8)
.i7:
	read r0, var[0(u8)]
	read r1, var[1(u8)]
	lt r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, .i9
	read r0, var[0(u8)]
	r1 = 15 (u8)
	and r0, r1 (u8)
	r1 = 0 (u8)
	eq r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, .i11
	read r0, var[0(u8)]
	push r0 (u8)
	call printHex2
.i11:
	read r0, var[0(u8)]
	r1 = 7 (u8)
	and r0, r1 (u8)
	r1 = 0 (u8)
	eq r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, .i13
	r0 = 32 (u8)
	emit
.i13:
	read r0, var[0(u8)]
	emit
	read r0, var[0(u8)]
	r1 = 15 (u8)
	and r0, r1 (u8)
	r1 = 15 (u8)
	eq r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, .i15
	r0 = 10 (u8)
	emit
.i15:
	read r0, var[0(u8)]
	r1 = 1 (u8)
	add r0, r1 (u8)
	write [0(u8)], r0
	jump .i7
.i9:
	dropVars u8, u8
	ret
