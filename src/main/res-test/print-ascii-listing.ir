printNibble:
	pop r0 (u8)
	r1 = 15 (u8)
	and r0, r1 (u8)
	r1 = 48 (u8)
	add r0, r1 (u8)
	push r0 (u8)
	r1 = 57 (u8)
	gt r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, endif_1
	r0 = 65 (u8)
	r1 = 57 (u8)
	sub r0, r1 (u8)
	r1 = 1 (u8)
	sub r0, r1 (u8)
	move r1, r0 (u8)
	pop r0 (u8)
	add r0, r1 (u8)
	push r0 (u8)
endif_1:
	pop r0 (u8)
	emit
	ret
printHex8:
	pop r0 (u8)
	push r0 (u8)
	move r1, r0 (u8)
	r0 = 4 (u8)
	shr r1, r0 (u8)
	push r1 (u8)
	call printNibble
	call printNibble
	ret
main:
	r0 = 0 (u8)
	push r0 (u8)
	r0 = 16 (u8)
	pushVar r0 (u8)
	pop r0 (u8)
	pushVar r0 (u8)
	r0 = 32 (u8)
	emit
	r0 = 120 (u8)
	emit
while_2:
	read r0, var[0(u8)]
	push r0 (u8)
	read r0, var[1(u8)]
	move r1, r0 (u8)
	pop r0 (u8)
	lt r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, endwhile_2
	read r0, var[0(u8)]
	r1 = 7 (u8)
	and r0, r1 (u8)
	r1 = 0 (u8)
	eq r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, endif_3
	r0 = 32 (u8)
	emit
endif_3:
	read r0, var[0(u8)]
	push r0 (u8)
	call printNibble
	read r0, var[0(u8)]
	r1 = 1 (u8)
	add r0, r1 (u8)
	write [0(u8)], r0
	jump while_2
endwhile_2:
	r0 = 10 (u8)
	emit
	dropVars u8, u8
	r0 = 32 (u8)
	push r0 (u8)
	r0 = 128 (u8)
	pushVar r0 (u8)
	pop r0 (u8)
	pushVar r0 (u8)
while_4:
	read r0, var[0(u8)]
	push r0 (u8)
	read r0, var[1(u8)]
	move r1, r0 (u8)
	pop r0 (u8)
	lt r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, endwhile_4
	read r0, var[0(u8)]
	r1 = 15 (u8)
	and r0, r1 (u8)
	r1 = 0 (u8)
	eq r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, endif_5
	read r0, var[0(u8)]
	push r0 (u8)
	call printHex8
endif_5:
	read r0, var[0(u8)]
	r1 = 7 (u8)
	and r0, r1 (u8)
	r1 = 0 (u8)
	eq r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, endif_6
	r0 = 32 (u8)
	emit
endif_6:
	read r0, var[0(u8)]
	emit
	read r0, var[0(u8)]
	r1 = 15 (u8)
	and r0, r1 (u8)
	r1 = 15 (u8)
	eq r0, r1 (u8)
	boolTest r0, r0 (i16)
	jump z, endif_7
	r0 = 10 (u8)
	emit
endif_7:
	read r0, var[0(u8)]
	r1 = 1 (u8)
	add r0, r1 (u8)
	write [0(u8)], r0
	jump while_4
endwhile_4:
	dropVars u8, u8
	ret
