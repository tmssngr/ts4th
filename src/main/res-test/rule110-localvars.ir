const %0: 20 2a

fill:
	pop r0 (u8)
	pushVar r0 (u8)
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (ptr)
	pushVar r0 (ptr)
.i1:
	read r0, var[1(i16)]
	r1 = 0 (i16)
	gt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i3
	read r0, var[0(ptr)]
	push r0 (ptr)
	read r0, var[2(u8)]
	pop r1 (ptr)
	store @r1, r0(u8)
	read r0, var[0(ptr)]
	r1 = 1 (i16)
	cast r1 (i16 -> ptr)
	add r0, r1 (ptr)
	write [0(ptr)], r0
	read r0, var[1(i16)]
	r1 = 1 (i16)
	sub r0, r1 (i16)
	write [1(i16)], r0
	jump .i1
.i3:
	dropVars ptr, i16, u8
	ret
printBoard:
	r0 = 124 (u8)
	emit
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 30 (i16)
	r1 = 2 (i16)
	sub r0, r1 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i1:
	read r0, var[0(i16)]
	push r0 (i16)
	read r0, var[1(i16)]
	move r1, r0 (i16)
	pop r0 (i16)
	lt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i3
	r0 = constant 0
	push r0 (ptr)
	r0 = 2 (i16)
	r0 = var 0:board
	push r0 (ptr)
	read r0, var[0(i16)]
	move r1, r0 (i16)
	pop r0 (ptr)
	cast r1 (i16 -> ptr)
	add r0, r1 (ptr)
	move r1, r0 (ptr)
	load r0(u8), @r1
	cast r0 (u8 -> i16)
	move r1, r0 (i16)
	pop r0 (ptr)
	cast r1 (i16 -> ptr)
	add r0, r1 (ptr)
	move r1, r0 (ptr)
	load r0(u8), @r1
	emit
	read r0, var[0(i16)]
	r1 = 1 (i16)
	add r0, r1 (i16)
	write [0(i16)], r0
	jump .i1
.i3:
	dropVars i16, i16
	r0 = 124 (u8)
	emit
	r0 = 10 (u8)
	emit
	ret
main:
	r0 = var 0:board
	push r0 (ptr)
	r0 = 30 (i16)
	push r0 (i16)
	r0 = 0 (u8)
	push r0 (u8)
	call fill
	r0 = var 0:board
	push r0 (ptr)
	r0 = 30 (i16)
	r1 = 2 (i16)
	sub r0, r1 (i16)
	move r1, r0 (i16)
	pop r0 (ptr)
	cast r1 (i16 -> ptr)
	add r0, r1 (ptr)
	move r1, r0 (ptr)
	r0 = 1 (u8)
	store @r1, r0(u8)
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 30 (i16)
	r1 = 2 (i16)
	sub r0, r1 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i1:
	read r0, var[0(i16)]
	push r0 (i16)
	read r0, var[1(i16)]
	move r1, r0 (i16)
	pop r0 (i16)
	lt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i3
	call printBoard
	r1 = var 0:board
	load r0(u8), @r1
	cast r0 (u8 -> i16)
	push r0 (i16)
	r0 = var 0:board
	r1 = 1 (i16)
	cast r1 (i16 -> ptr)
	add r0, r1 (ptr)
	move r1, r0 (ptr)
	load r0(u8), @r1
	cast r0 (u8 -> i16)
	move r1, r0 (i16)
	pop r0 (i16)
	or r0, r1 (i16)
	pushVar r0 (i16)
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 30 (i16)
	r1 = 1 (i16)
	sub r0, r1 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i4:
	read r0, var[0(i16)]
	push r0 (i16)
	read r0, var[1(i16)]
	move r1, r0 (i16)
	pop r0 (i16)
	lt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i6
	read r0, var[2(i16)]
	move r1, r0 (i16)
	r0 = 1 (i16)
	shl r1, r0 (i16)
	move r0, r1 (i16)
	r1 = 7 (i16)
	and r0, r1 (i16)
	push r0 (i16)
	r0 = var 0:board
	push r0 (ptr)
	read r0, var[0(i16)]
	r1 = 1 (i16)
	add r0, r1 (i16)
	move r1, r0 (i16)
	pop r0 (ptr)
	cast r1 (i16 -> ptr)
	add r0, r1 (ptr)
	move r1, r0 (ptr)
	load r0(u8), @r1
	cast r0 (u8 -> i16)
	move r1, r0 (i16)
	pop r0 (i16)
	or r0, r1 (i16)
	write [2(i16)], r0
	r0 = 110 (i16)
	push r0 (i16)
	read r0, var[2(i16)]
	pop r1 (i16)
	shr r1, r0 (i16)
	move r0, r1 (i16)
	r1 = 1 (i16)
	and r0, r1 (i16)
	push r0 (i16)
	r0 = var 0:board
	push r0 (ptr)
	read r0, var[0(i16)]
	move r1, r0 (i16)
	pop r0 (ptr)
	cast r1 (i16 -> ptr)
	add r0, r1 (ptr)
	move r1, r0 (ptr)
	pop r0 (i16)
	push r1 (ptr)
	cast r0 (i16 -> u8)
	pop r1 (ptr)
	store @r1, r0(u8)
	read r0, var[0(i16)]
	r1 = 1 (i16)
	add r0, r1 (i16)
	write [0(i16)], r0
	jump .i4
.i6:
	dropVars i16, i16, i16
	read r0, var[0(i16)]
	r1 = 1 (i16)
	add r0, r1 (i16)
	write [0(i16)], r0
	jump .i1
.i3:
	dropVars i16, i16
	ret

var board, 30
