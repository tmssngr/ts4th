const %0: 62 6f 6f 6d 21 20 79 6f 75 27 76 65 20 6c 6f 73 74

initRandom:
	r1 = var 0:__random__
	pop r0 (u32)
	store @r1, r0(u32)
	ret
random:
	r0 = 48271 (u32)
	pushVar r0 (u32)
	r1 = var 0:__random__
	load r0(u32), @r1
	push r0 (u32)
	and r0, 524287 (u32)
	read r1, var[0(u32)]
	imul r0, r1 (u32)
	move r1, r0 (u32)
	pop r0 (u32)
	push r1 (u32)
	move r1, r0 (u32)
	shr r1, 15 (u32)
	move r0, r1 (u32)
	read r1, var[0(u32)]
	imul r0, r1 (u32)
	push r0 (u32)
	and r0, 65535 (u32)
	move r1, r0 (u32)
	shl r1, 15 (u32)
	pop r0 (u32)
	push r1 (u32)
	move r1, r0 (u32)
	shr r1, 16 (u32)
	pop r0 (u32)
	add r0, r1 (u32)
	move r1, r0 (u32)
	pop r0 (u32)
	add r0, r1 (u32)
	push r0 (u32)
	and r0, 2147483647 (u32)
	move r1, r0 (u32)
	pop r0 (u32)
	push r1 (u32)
	move r1, r0 (u32)
	shr r1, 31 (u32)
	pop r0 (u32)
	add r0, r1 (u32)
	push r0 (u32)
	push r0 (u32)
	r1 = var 0:__random__
	pop r0 (u32)
	store @r1, r0(u32)
	dropVars u32
	ret
printNibble:
	pop r0 (u8)
	and r0, 15 (u8)
	add r0, 48 (u8)
	push r0 (u8)
	gt r0, 57 (u8)
	boolTest r0, r0 (i16)
	jump z, .i2
	r0 = 65 (u8)
	sub r0, 57 (u8)
	sub r0, 1 (u8)
	move r1, r0 (u8)
	pop r0 (u8)
	add r0, r1 (u8)
	push r0 (u8)
.i2:
	pop r0 (u8)
	emit
	ret
printHex2:
	pop r0 (u8)
	push r0 (u8)
	move r1, r0 (u8)
	shr r1, 4 (u8)
	push r1 (u8)
	call printNibble
	call printNibble
	ret
printHex4:
	pop r0 (u16)
	push r0 (u16)
	move r1, r0 (u16)
	shr r1, 8 (u16)
	move r0, r1 (u16)
	cast r0 (u16 -> u8)
	push r0 (u8)
	call printHex2
	pop r0 (u16)
	cast r0 (u16 -> u8)
	push r0 (u8)
	call printHex2
	ret
rowColumnToCell:
	pop r1 (i16)
	pop r0 (i16)
	push r1 (i16)
	imul r0, 40 (i16)
	move r1, r0 (i16)
	pop r0 (i16)
	add r0, r1 (i16)
	push r0 (i16)
	r1 = var 1:field
	pop r0 (i16)
	cast r0 (i16 -> ptr)
	add r1, r0 (ptr)
	push r1 (ptr)
	ret
getCell:
	call rowColumnToCell
	pop r1 (ptr)
	load r0(u8), @r1
	push r0 (u8)
	ret
bomb?:
	pop r0 (u8)
	and r0, 1 (u8)
	neq r0, 0 (u8)
	push r0 (bool)
	ret
open?:
	pop r0 (u8)
	and r0, 2 (u8)
	neq r0, 0 (u8)
	push r0 (bool)
	ret
checkCellBounds:
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	read r0, var[0(i16)]
	push r0 (i16)
	read r0, var[1(i16)]
	push r0 (i16)
	read r0, var[0(i16)]
	ge r0, 0 (i16)
	push r0 (bool)
	read r0, var[0(i16)]
	lt r0, 20 (i16)
	move r1, r0 (bool)
	pop r0 (bool)
	and r0, r1 (bool)
	push r0 (bool)
	read r0, var[1(i16)]
	ge r0, 0 (i16)
	push r0 (bool)
	read r0, var[1(i16)]
	lt r0, 40 (i16)
	move r1, r0 (bool)
	pop r0 (bool)
	and r0, r1 (bool)
	move r1, r0 (bool)
	pop r0 (bool)
	and r0, r1 (bool)
	push r0 (bool)
	dropVars i16, i16
	ret
setCell:
	pop r0 (u8)
	pushVar r0 (u8)
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	read r0, var[0(i16)]
	push r0 (i16)
	read r0, var[1(i16)]
	push r0 (i16)
	call rowColumnToCell
	pop r1 (ptr)
	read r0, var[2(u8)]
	store @r1, r0(u8)
	dropVars i16, i16, u8
	ret
getBombCountAround:
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	r0 = -1 (i16)
	push r0 (i16)
	r0 = 2 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i1:
	read r0, var[0(i16)]
	read r1, var[1(i16)]
	lt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i3
	r0 = -1 (i16)
	push r0 (i16)
	r0 = 2 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i4:
	read r0, var[0(i16)]
	read r1, var[1(i16)]
	lt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i6
	read r0, var[4(i16)]
	read r1, var[2(i16)]
	add r0, r1 (i16)
	push r0 (i16)
	read r0, var[5(i16)]
	read r1, var[0(i16)]
	add r0, r1 (i16)
	push r0 (i16)
	call checkCellBounds
	pop r0 (bool)
	boolTest r0, r0 (i16)
	jump z, .i8
	call getCell
	call bomb?
	pop r0 (bool)
	boolTest r0, r0 (i16)
	jump z, .i11
	read r0, var[8(i16)]
	add r0, 1 (i16)
	write [8(i16)], r0
	jump .i11
.i8:
	pop r0 (i16)
	pop r0 (i16)
.i11:
	read r0, var[0(i16)]
	add r0, 1 (i16)
	write [0(i16)], r0
	jump .i4
.i6:
	dropVars i16, i16
	read r0, var[0(i16)]
	add r0, 1 (i16)
	write [0(i16)], r0
	jump .i1
.i3:
	dropVars i16, i16
	read r0, var[4(i16)]
	push r0 (i16)
	dropVars i16, i16, i16, i16, i16
	ret
getSpacer:
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	read r0, var[2(i16)]
	read r1, var[0(i16)]
	eq r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i2
	read r0, var[3(i16)]
	read r1, var[1(i16)]
	eq r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i4
	r0 = 91 (u8)
	push r0 (u8)
	jump .i9
.i4:
	read r0, var[3(i16)]
	push r0 (i16)
	read r0, var[1(i16)]
	sub r0, 1 (i16)
	move r1, r0 (i16)
	pop r0 (i16)
	eq r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i7
	r0 = 93 (u8)
	push r0 (u8)
	jump .i9
.i7:
	r0 = 32 (u8)
	push r0 (u8)
	jump .i9
.i2:
	r0 = 32 (u8)
	push r0 (u8)
.i9:
	dropVars i16, i16, i16, i16
	ret
printCell:
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (u8)
	pushVar r0 (u8)
	read r0, var[0(u8)]
	push r0 (u8)
	call open?
	pop r0 (bool)
	boolTest r0, r0 (i16)
	jump z, .i2
	read r0, var[0(u8)]
	push r0 (u8)
	call bomb?
	pop r0 (bool)
	boolTest r0, r0 (i16)
	jump z, .i4
	r0 = 42 (u8)
	push r0 (u8)
	jump .i9
.i4:
	read r0, var[1(i16)]
	push r0 (i16)
	read r0, var[2(i16)]
	push r0 (i16)
	call getBombCountAround
	pop r0 (i16)
	push r0 (i16)
	gt r0, 0 (i16)
	boolTest r0, r0 (i16)
	jump z, .i7
	pop r0 (i16)
	cast r0 (i16 -> u8)
	add r0, 48 (u8)
	push r0 (u8)
	jump .i9
.i7:
	pop r0 (i16)
	r0 = 32 (u8)
	push r0 (u8)
	jump .i9
.i2:
	r0 = 46 (u8)
	push r0 (u8)
.i9:
	pop r0 (u8)
	emit
	dropVars u8, i16, i16
	ret
printField:
	pop r0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
	r0 = 0 (u8)
	r1 = 0 (u8)
	setCursor
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 20 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i1:
	read r0, var[0(i16)]
	read r1, var[1(i16)]
	lt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i3
	r0 = 124 (u8)
	emit
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 40 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i4:
	read r0, var[0(i16)]
	read r1, var[1(i16)]
	lt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i6
	read r0, var[2(i16)]
	push r0 (i16)
	read r0, var[0(i16)]
	push r0 (i16)
	read r0, var[4(i16)]
	push r0 (i16)
	read r0, var[5(i16)]
	push r0 (i16)
	call getSpacer
	pop r0 (u8)
	emit
	read r0, var[2(i16)]
	push r0 (i16)
	read r0, var[0(i16)]
	push r0 (i16)
	call getCell
	read r0, var[2(i16)]
	push r0 (i16)
	read r0, var[0(i16)]
	push r0 (i16)
	call printCell
	read r0, var[0(i16)]
	add r0, 1 (i16)
	write [0(i16)], r0
	jump .i4
.i6:
	dropVars i16, i16
	read r0, var[0(i16)]
	push r0 (i16)
	r0 = 40 (i16)
	push r0 (i16)
	read r0, var[2(i16)]
	push r0 (i16)
	read r0, var[3(i16)]
	push r0 (i16)
	call getSpacer
	pop r0 (u8)
	emit
	r0 = 124 (u8)
	emit
	r0 = 10 (u8)
	emit
	read r0, var[0(i16)]
	add r0, 1 (i16)
	write [0(i16)], r0
	jump .i1
.i3:
	dropVars i16, i16, i16, i16
	ret
initField:
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 20 (i16)
	imul r0, 2000 (i16)
	idiv r0, 1000 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i1:
	read r0, var[0(i16)]
	read r1, var[1(i16)]
	lt r0, r1 (i16)
	boolTest r0, r0 (i16)
	jump z, .i3
	call random
	r0 = 20 (i16)
	cast r0 (i16 -> u32)
	move r1, r0 (u32)
	pop r0 (u32)
	imod r0, r1 (u32)
	cast r0 (u32 -> i16)
	push r0 (i16)
	call random
	r0 = 40 (i16)
	cast r0 (i16 -> u32)
	move r1, r0 (u32)
	pop r0 (u32)
	imod r0, r1 (u32)
	cast r0 (u32 -> i16)
	push r0 (i16)
	r0 = 1 (u8)
	push r0 (u8)
	call setCell
	read r0, var[0(i16)]
	add r0, 1 (i16)
	write [0(i16)], r0
	jump .i1
.i3:
	dropVars i16, i16
	ret
main:
	r0 = 7439742 (u32)
	push r0 (u32)
	call initRandom
	call initField
	r0 = 0 (i16)
	push r0 (i16)
	r0 = 0 (i16)
	pushVar r0 (i16)
	pop r0 (i16)
	pushVar r0 (i16)
.i1:
	read r0, var[0(i16)]
	push r0 (i16)
	read r0, var[1(i16)]
	push r0 (i16)
	call printField
	getChar
	push r0 (u16)
	push r0 (u16)
	call printHex4
	r0 = 32 (u8)
	emit
	pop r0 (u16)
	push r0 (u16)
	eq r0, 27 (u16)
	boolTest r0, r0 (i16)
	jump z, .i5
	pop r0 (u16)
	jump .i3
.i5:
	pop r0 (u16)
	push r0 (u16)
	eq r0, 57416 (u16)
	boolTest r0, r0 (i16)
	jump z, .i7
	read r0, var[0(i16)]
	add r0, 19 (i16)
	imod r0, 20 (i16)
	write [0(i16)], r0
.i7:
	pop r0 (u16)
	push r0 (u16)
	eq r0, 57424 (u16)
	boolTest r0, r0 (i16)
	jump z, .i9
	read r0, var[0(i16)]
	add r0, 1 (i16)
	imod r0, 20 (i16)
	write [0(i16)], r0
.i9:
	pop r0 (u16)
	push r0 (u16)
	eq r0, 57419 (u16)
	boolTest r0, r0 (i16)
	jump z, .i11
	read r0, var[1(i16)]
	add r0, 39 (i16)
	imod r0, 40 (i16)
	write [1(i16)], r0
.i11:
	pop r0 (u16)
	push r0 (u16)
	eq r0, 57421 (u16)
	boolTest r0, r0 (i16)
	jump z, .i13
	read r0, var[1(i16)]
	add r0, 1 (i16)
	imod r0, 40 (i16)
	write [1(i16)], r0
.i13:
	pop r0 (u16)
	push r0 (u16)
	eq r0, 13 (u16)
	boolTest r0, r0 (i16)
	jump z, .i15
	read r0, var[0(i16)]
	push r0 (i16)
	read r0, var[1(i16)]
	push r0 (i16)
	call getCell
	pop r0 (u8)
	pushVar r0 (u8)
	read r0, var[0(u8)]
	push r0 (u8)
	call open?
	pop r0 (bool)
	not r0 (bool)
	boolTest r0, r0 (i16)
	jump z, .i17
	read r0, var[0(u8)]
	or r0, 2 (u8)
	write [0(u8)], r0
	read r0, var[1(i16)]
	push r0 (i16)
	read r0, var[2(i16)]
	push r0 (i16)
	read r0, var[0(u8)]
	push r0 (u8)
	call setCell
.i17:
	read r0, var[0(u8)]
	push r0 (u8)
	call bomb?
	pop r0 (bool)
	boolTest r0, r0 (i16)
	jump z, .i19
	read r0, var[1(i16)]
	push r0 (i16)
	read r0, var[2(i16)]
	push r0 (i16)
	call printField
	r1 = constant 0
	r0 = 17 (u16)
	printString r1 (0)
	pop r0 (u16)
	dropVars u8
	jump .i3
.i19:
	dropVars u8
.i15:
	pop r0 (u16)
	jump .i1
.i3:
	dropVars i16, i16
	ret

var __random__, 4
var field, 800
